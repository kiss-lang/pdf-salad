(import haxe.Constraints)
(import js.lib.Uint8Array)
(import js.node.Fs)
(import js.node.Buffer)

(import pdf_lib.PDFFont)
(import pdf_lib.PDFDocument)
(import js.lib.Promise)

(defNew [&prop :Array<String> _pdfs
            &prop :RandomizerArgs args]
    
    [
        :Array<String> pdfs
                        (filter
                            (for path _pdfs
                                (when (path.endsWith ".pdf")
                                    path)))
        &mut :Array<String> mutPdfs []
        :Map<String,PDFDocument> pdfMap (new Map)
        :Map<PDFDocument,Array<Float>> pdfPageMap (new Map)
        &mut :Array<Dynamic> pdfPageArray []
        &mut :PDFDocument outputPdf null
    ])

(function fromFolder [:String folder :RandomizerArgs args]
    (new Randomizer (for file (Fs.readdirSync folder) (joinPath folder file)) args))

(method run [:String->Void onFinish]
    (set mutPdfs pdfs)
    (set pdfPageArray [])
    (pdfMap.clear)
    (pdfPageMap.clear)
    (awaitLet [inputPdfs (PDFTools.loadAll pdfs)
                newPdf (PDFDocument.create)
                font (newPdf.embedFont "Helvetica")]
        (catch [error]
            ~error)

        (set outputPdf newPdf)
        (doFor [file pdf] (zip pdfs inputPdfs)
            (dictSet pdfMap file pdf)
            (let [pageCount (Std.int (pdf.getPageCount))
                    pageCountArray (for i (range pageCount) (+ 0.0 i))]
                (dictSet pdfPageMap pdf pageCountArray)
                (set pdfPageArray (concat pdfPageArray (zip (for _ (range pageCount) file) pageCountArray)))))
        
        
        // Default arguments
        (unless args.chunkPages (set args.chunkPages 1))
        (unless args.outputPages (set args.outputPages (Std.int (apply + (for pdf inputPdfs (pdf.getPageCount))))))
        (when (= null args.equalWeightPdfs)
            (set args.equalWeightPdfs true))

        (runIteration onFinish font)))
                
(method isFinished []
    (or (= 0 (count pdfMap))
        (= args.outputPages (outputPdf.getPageCount))))
                
(method :Void runIteration [:String->Void onFinish :PDFFont font]
    (if (isFinished)
            (awaitLet [bytesOut (outputPdf.save)
                        &sync outFile "random-$(.replace (.toString (Date.now)) ":" "-").pdf"]
                (catch [error]
                    ~error)

                (Fs.writeFileSync outFile (Buffer.from bytesOut))
                (onFinish outFile))
        {
            // Choose next pdf
            (let [nextPdf 
                        (cond
                            (args.equalWeightPdfs
                                (nth mutPdfs (Std.random mutPdfs.length)))
                            (true
                                (let [[pdf _] (nth pdfPageArray (Std.random pdfPageArray.length))]
                                    pdf)))
                    nextPdfDocument (dictGet pdfMap nextPdf)
                    :Array<Float> slice
                        (cond
                            // Take whole PDF
                            ((<= args.chunkPages 0)
                                (pdfMap.remove nextPdf)
                                (mutPdfs.remove nextPdf)
                                (collect (range (Std.int (nextPdfDocument.getPageCount)))))
                            // Just take a chunk
                            (true
                                (.splice 
                                    (dictGet pdfPageMap nextPdfDocument) 
                                    (cond
                                        (args.sequentialWithinPdf
                                            0)
                                        (true
                                            (Std.int (* args.chunkPages (Std.random (Math.ceil (/ .length (dictGet pdfPageMap nextPdfDocument) args.chunkPages)))))))
                                    args.chunkPages)))
                    takeChunkPromise
                        (outputPdf.copyPages nextPdfDocument slice)]
                (awaitLet [pages takeChunkPromise]
                    (when (= 0 .length (dictGet pdfPageMap nextPdfDocument))
                        (pdfMap.remove nextPdf)
                        (mutPdfs.remove nextPdf))
                    (doFor [idx page] (zip slice pages)
                        (when args.sourceLinksFolder
                            (PDFTools.addPageLink page font (joinPath args.sourceLinksFolder nextPdf) idx))
                        (outputPdf.addPage page))
                    // If a chunk put the PDF over its max page count, remove extra pages
                    (while (> (outputPdf.getPageCount) args.outputPages)
                        (outputPdf.removePage (- (outputPdf.getPageCount) 1)))

                    (runIteration onFinish font)))

            
        }))

/*
                pages (Promise.all
                        (for _ (range 0 (Std.parseInt numPages))
                            (let [:PDFDocument pdf (nth inputPdfs (Std.random inputPdfs.length))
                                    :Float page (Std.random (Std.int (pdf.getPageCount)))]
                                (saladPdf.copyPages pdf [page]))))]
        (doFor page pages (saladPdf.addPage (first page)))
        ))*/

